
@model FinalProject.Models.Login


@{
    ViewBag.Title = "LoginCus";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    table {
        height: 250px;
        margin: auto;
        margin-top: 40px;
        border: 3px solid gray;
        border-collapse: collapse;
    }

    td {
        height: 20px;
        border-bottom: 1px solid rgba(128, 128, 128, 0.233)
    }

    input {
        line-height: 22px;
        width: 200px;
    }

    #show_message {
        margin: 0;
        font-style: italic;
    }

    .sbj-col {
        text-align: left;
        width: 140px;
        padding: 0 60px;
        font-size: 18px;
        font-weight: bold;
    }

    .input-col {
        width: 200px;
    }

    .message-content {
        text-align: left;
        font-style: italic;
        padding-left: 20px;
        padding-right: 80px;
        box-sizing: border-box;
    }

    .message-content {
        color: red;
    }

    .cus-login {
        float: left;
        padding: 10px 12px;
        font-weight: bold;
        border: none;
        border-radius: 4px;
        background: var(--main-color-06);
        color: var(--main-color-02);
        cursor: pointer;
    }

        .cus-login:active {
            opacity: 0.8;
        }
</style>
<hr />

@using (Html.BeginForm("LoginAccountCus", "Customers"))
{
    @Html.AntiForgeryToken()
    <table>
        <caption>
            <h2>ĐĂNG NHẬP</h2>
            @if (ViewBag.ErrorInfo != null)
            {
                <p>(@ViewBag.ErrorInfo)</p>
            }
        </caption>
        <tbody>

            <tr>
                <td class="sbj-col">@Html.LabelFor(model => model.UserName)</td>
                <td class="input-col">@Html.TextBoxFor(model => model.UserName, new { style = "filed-validation-error" })</td>
                <td class="message-content">@Html.ValidationMessageFor(model => model.UserName)</td>
            </tr>
            <tr>
                <td class="sbj-col">@Html.LabelFor(model => model.Password)</td>
                <td class="input-col">@Html.PasswordFor(model => model.Password)</td>
                <td class="message-content">@Html.ValidationMessageFor(model => model.Password)</td>
            </tr>
            <tr id="login-btn" colspan="3">
                <td class="sbj-col"></td>
                <td class="input-col">
                    <button type="submit" value="Login" class="cus-login">Đăng nhập</button>
                </td>
                <td></td>
            </tr>
        </tbody>
    </table>
}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.3/dist/sweetalert2.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.3/dist/sweetalert2.min.css">
@if (TempData["IsRegistered"] != null && (bool)TempData["IsRegistered"])
{
    <script>
        // Hàm hiển thị thông báo đăng ký thành công bằng SweetAlert2
        function showSuccessAlert() {
            Swal.fire({
                icon: 'success',
                title: 'Đăng ký thành công!',
                text: 'Bạn đã đăng ký tài khoản thành công.',
                confirmButtonText: 'OK',
                confirmButtonColor: '#3085d6',
            });
        }

        // Gọi hàm hiển thị thông báo khi trang đã load xong
        window.onload = function () {
            showSuccessAlert();
        }
    </script>
}